{
  "language": "Solidity",
  "sources": {
    "contracts/OrderBook.sol": {
      "content": "// Solidity files have to start with this pragma.\n// It will be used by the Solidity compiler to validate its version.\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract OrderBook {\n  enum Status {\n    Active,\n    Completed,\n    Cancelled\n  }\n\n  struct Order {\n    address maker;\n    address tokenBid;\n    uint256 bidAmt;\n    address tokenAsk;\n    uint256 askAmt;\n\n    address taker;\n    Status  status;\n    uint256 timestamp;\n  }\n\n  Order[] public orders;\n\n  event OrderPlaced(address indexed, uint256, address, uint256, address, uint256);\n  event OrderCancelled(uint256);\n  event OrderExecuted(address indexed, uint256);\n\n  function placeOrder(address tokenBid, uint256 bidAmt, address tokenAsk, uint256 askAmt) public returns (uint256) {\n    // TODO: check the tokenBid and tokenAsk fulfill the\n\n    require(IERC20(tokenBid).balanceOf(msg.sender) >= bidAmt, \"Insufficient bid token\");\n\n    // Place the order\n    // solhint-disable-next-line not-rely-on-time\n    Order memory newOrder = Order(msg.sender, tokenBid, bidAmt, tokenAsk, askAmt, address(0), Status.Active, block.timestamp);\n    orders.push(newOrder);\n    uint256 index = orders.length - 1;\n\n    // Approve this contract to spend your token\n    IERC20(tokenBid).approve(address(this), bidAmt);\n    emit OrderPlaced(msg.sender, index, tokenBid, bidAmt, tokenAsk, askAmt);\n\n    return index;\n  }\n\n  function cancelOrder(uint256 index) public {\n    // check\n    require(index < orders.length, \"Invalid index\");\n    Order storage order = orders[index];\n    require(order.status == Status.Active, \"Not an active order\");\n    require(order.maker == msg.sender, \"Not order owner\");\n\n    order.status = Status.Cancelled;\n    // solhint-disable-next-line not-rely-on-time\n    order.timestamp = block.timestamp;\n    emit OrderCancelled(index);\n  }\n\n  function takeOrder(uint256 index) public {\n    // check\n    require(index < orders.length, \"Invalid index\");\n    Order storage order = orders[index];\n    require(order.status == Status.Active, \"Not an active order\");\n    require(IERC20(order.tokenAsk).balanceOf(msg.sender) >= order.askAmt, \"Insufficient ask token\");\n\n    IERC20(order.tokenAsk).approve(address(this), order.askAmt);\n\n    // The actual token transfer\n    IERC20(order.tokenBid).transferFrom(order.maker, msg.sender, order.bidAmt);\n    IERC20(order.tokenAsk).transferFrom(msg.sender, order.maker, order.askAmt);\n\n    order.status = Status.Completed;\n    order.taker = msg.sender;\n    // solhint-disable-next-line not-rely-on-time\n    order.timestamp = block.timestamp;\n    emit OrderExecuted(msg.sender, index);\n  }\n\n  function ordersLen() public view returns (uint256) {\n    return orders.length;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}